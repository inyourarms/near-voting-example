name: Sync Fork

on:
  schedule:
    - cron: '*/10 * * * *'

env:
  TEST_VAR: "test_value"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - shell: bash
        run: |
          latest_release=$(curl -s https://api.github.com/repos/nearprotocol/nearcore/releases | jq .[0])
          echo $latest_release
          github_tag=$(echo $latest_release | jq -r '.tag_name')

          author=$(echo $latest_release | jq -r '.author.login')
          if [[ $author != "bowenwang1996" ]]; then
            echo "Bowen not approved"
            exit 1
          else
            echo $github_tag > github-tag.txt
          fi
      - name: Upload github tag
        uses: actions/upload-artifact@v2
        with:
          name: github-tag
          path: github-tag.txt
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Download-github-tag
        uses: actions/download-artifact@v2
        with:
          name: github-tag
      - shell: bash
        run: |
          github_tag=`cat github-tag.txt`
          echo $github_tag
          
      - name: Check-tag
        run: |
          github_tag=`cat github-tag.txt`
          echo $github_tag

      - name: Run-Sync
        uses: TG908/fork-sync@v1.1
        with:
          github_token: ${{ secrets.PAT_TOKEN }}
          owner: spdd
          base: master
          head: fix-01
      
      - name: Create an issue
        if: ${{ failure() }}
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "Print test var"
          echo $TEST_VAR
          
          workflow_run=$(curl $GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/runs | 
          jq -r '.workflow_runs[0]')

          logs_url=$(echo $workflow_run | jq -r '.logs_url')

          job_id=$(echo $workflow_run | jq -r '.id')

          step_number=1

          job=$(curl $GITHUB_API_URL/repos/$GITHUB_REPOSITORY/actions/runs/$job_id/jobs |  jq -r '.jobs[0]')

          job_name=$(echo $job | jq -r '.name')
          step_name=$(echo $job | jq -r .steps[$step_number].name)
          
          curl -v -L -u inyourarms:$PAT_TOKEN -o logs_$job_id.zip "$logs_url"
          mkdir logs_$job_id
          unzip logs_$job_id.zip -d logs_$job_id
          cd logs_$job_id/$job_name
          issue_msg="$(cat $(($step_number + 1))_$step_name.txt)"

          json_data=$( jq -n \
                            --arg sn "$step_name" \
                            --arg im "$issue_msg" \
                            '{title: $sn, body: $im}' )

          curl -u inyourarms:$PAT_TOKEN -d "$json_data" "https://api.github.com/repos/spdd/near-voting-example/issues" 
