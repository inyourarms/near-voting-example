name: Sync Fork

on:
  schedule:
    - cron: '*/10 * * * *'

env:
  REPO: "nearprotocol/nearcore"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - shell: bash
        run: |
          latest_release=$(curl -s https://api.github.com/repos/nearprotocol/nearcore/releases | jq .[0])
          echo $latest_release
          github_tag=$(echo $latest_release | jq -r '.tag_name')

          author=$(echo $latest_release | jq -r '.author.login')
          if [[ $author != "bowenwang1996" ]]; then
            echo "Bowen not approved"
            exit 1
          else
            echo $github_tag > github-tag.txt
          fi
      - name: Upload github tag
        uses: actions/upload-artifact@v2
        with:
          name: github-tag
          path: github-tag.txt
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Download-github-tag
        uses: actions/download-artifact@v2
        with:
          name: github-tag
      - shell: bash
        run: |
          github_tag=`cat github-tag.txt`
          echo $github_tag
      
      - name: Get Docker Hub Tags   
        if: ${{ success() }}
        env:
          DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}
        run: |
          TOKEN=`curl -s "https://auth.docker.io/token?service=registry.docker.io&scope=repository:$DOCKER_IMAGE_NAME:pull" | jq '.token' | sed 's/"//g'`
          TAGS=`curl -s https://registry.hub.docker.com/v2/$DOCKER_IMAGE_NAME/tags/list -H "Authorization: Bearer $TOKEN" | jq ".tags[]" | sed 's/"//g'`

          github_tag=`cat github-tag.txt`
          for tag in $TAGS;
          do
            # if $github_tag contains in $tag
            if [[ $tag == *"$github_tag"* ]]; then
              # already deployed
              exit 1
            else
              # Build the Docker image with github tag
              echo "FROM scratch" > Dockerfile
              echo "ADD hello /" >> Dockerfile
              echo 'CMD ["/hello"]' >> Dockerfile
              echo "Build a new image: $github_tag"
              docker build . --file Dockerfile --tag nearcore:$github_tag
            fi
          done

      - name: Publish GitHub Tag to Registry
        if: ${{ success() }}
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: ${{ secrets.DOCKER_IMAGE_NAME }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Latest Docker Image
        if: ${{ success() }}
        run: | 
          rm Dockerfile
          github_tag=`cat github-tag.txt`
          docker rmi nearcore:$github_tag
          git clone -b $github_tag https://github.com/nearprotocol/nearcore.git
          cd nearcore
          docker build . --file Dockerfile --tag nearcore:latest

      - name: Publish Latest Docker Image to Registry
        if: ${{ success() }}
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: ${{ secrets.DOCKER_IMAGE_NAME }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create an issue
        if: ${{ failure() }}
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "Print test var"
          echo $TEST_VAR
          
          workflow_run=$(curl https://api.github.com/repos/inyourarms/near-voting-example/actions/runs | 
          jq -r '.workflow_runs[0]')

          logs_url=$(echo $workflow_run | jq -r '.logs_url')
          echo "Logs Url Here"
          echo $logs_url

          job_id=$(echo $workflow_run | jq -r '.id')

          step_number=0

          job=$(curl https://api.github.com/repos/inyourarms/near-voting-example/actions/runs/$job_id/jobs |  jq -r '.jobs[0]')

          job_name=$(echo $job | jq -r '.name')
          step_name=$(echo $job | jq -r .steps[$step_number].name)
          
          curl -v -L -u inyourarms:$PAT_TOKEN -o logs_$job_id.zip "$logs_url"
          mkdir logs_$job_id
          unzip logs_$job_id.zip -d logs_$job_id
          cd logs_$job_id/$job_name
          issue_msg="$(cat $(($step_number + 1))_$step_name.txt)"

          json_data=$( jq -n \
                            --arg sn "$step_name" \
                            --arg im "$issue_msg" \
                            '{title: $sn, body: $im}' )

          curl -u inyourarms:$PAT_TOKEN -d "$json_data" "https://api.github.com/repos/spdd/near-voting-example/issues" 
